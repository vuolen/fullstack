{"version":3,"sources":["components/ContactItem.js","components/ContactList.js","components/ContactFilterForm.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["ContactItem","name","number","del","onClick","ContactList","contacts","deleteContact","map","contact","key","id","ContactFilterForm","filter","setFilter","value","onChange","event","target","Notification","text","error","className","axios","get","then","response","data","newPerson","post","newObject","put","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","notification","setNotification","isNotificationError","setIsNotificationError","useEffect","personsService","setNotificationForFiveSeconds","setTimeout","onSubmit","preventDefault","some","elem","existing","find","p","window","confirm","catch","concat","type","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.026fd09a.chunk.js","sourcesContent":["import React from 'react'\n\nconst ContactItem = ({name, number, del}) => (\n    <li>\n        {name} - {number}\n        <button onClick={del}>\n            delete\n        </button>\n    </li>\n)\n\nexport default ContactItem","import React from 'react'\nimport ContactItem from './ContactItem.js'\n\nconst ContactList = ({contacts, deleteContact}) => (\n    <ul>\n        {contacts.map((contact) => \n            <ContactItem  name={contact.name}\n                number={contact.number}\n                key={contact.name}\n                del={() => deleteContact(contact.id)}/>\n        )}\n    </ul>\n)\n\nexport default ContactList","import React from 'react'\n\nconst ContactFilterForm = ({filter, setFilter}) => {\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value)\n    }\n\n    return (\n        <div>\n            search by \n            <input  value={filter}\n                    onChange={handleFilterChange} />\n        </div>\n    )\n}\n\nexport default ContactFilterForm","import React from \"react\";\n\nconst Notification = ({ text, error }) => {\n  if (text === null) {\n    return null;\n  }\n\n  return (\n    <div className={error ? \"error\" : \"notification\"}>\n      {text}\n    </div>\n  );\n}\n\n\nexport default Notification;\n","import axios from 'axios'\n\nconst BASE_URL = \"/api/persons\"\n\nconst getAll = () => {\n    return axios\n        .get(BASE_URL)\n        .then(response => response.data)\n}\n\nconst create = newPerson => {\n    return axios\n        .post(BASE_URL, newPerson)\n        .then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    return axios\n        .put(`${BASE_URL}/${id}`, newObject)\n        .then(response => response.data)\n} \n\nconst del = (id) => {\n    return axios\n        .delete(`${BASE_URL}/${id}`)\n        .then(response => response.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    del\n}\n","import React, { useState, useEffect } from \"react\";\nimport ContactList from \"./components/ContactList\";\nimport ContactFilterForm from \"./components/ContactFilterForm\";\nimport Notification from \"./components/Notification\";\n\nimport personsService from \"./services/persons\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [notification, setNotification] = useState(null);\n  const [isNotificationError, setIsNotificationError] = useState(false);\n\n\n  useEffect(() => {\n    personsService.getAll().then((data) => {\n      setPersons(data);\n    });\n  }, []);\n\n  const setNotificationForFiveSeconds = (text, error = false) => {\n    setNotification(text);\n    setIsNotificationError(error);\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  const addName = (event) => {\n    event.preventDefault();\n\n    if (persons.some((elem) => elem.name === newName)) {\n      const existing = persons.find((p) => p.name === newName);\n      const newPerson = { ...existing, number: newNumber };\n      const confirm = window.confirm(\n        `${newPerson.name} is already added to the phonebook, replace the old number with a new one?`\n      );\n      if (confirm) {\n        personsService.update(newPerson.id, newPerson).then((data) => {\n          setPersons(persons.map((p) => (p.id !== newPerson.id ? p : data)));\n          setNewName(\"\");\n          setNewNumber(\"\");\n          setNotificationForFiveSeconds(`Updated ${newPerson.name}`);\n        }).catch(error => {\n          setNotificationForFiveSeconds(`${newPerson.name} has already been deleted from the server`, true);\n        });\n      }\n      return;\n    }\n\n    const newPerson = { name: newName, number: newNumber };\n\n    personsService.create(newPerson).then((data) => {\n      setPersons(persons.concat(data));\n      setNewName(\"\");\n      setNewNumber(\"\");\n      setNotificationForFiveSeconds(`Added ${newPerson.name}`);\n    });\n  };\n\n  const getFilteredContacts = () =>\n    persons.filter((elem) =>\n      elem.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const deleteContact = (id) => {\n    const contact = persons.find((p) => p.id === id);\n    const confirm = window.confirm(`Delete ${contact.name}?`);\n    if (confirm) {\n      personsService.del(id).then(() => {\n        setPersons(persons.filter((p) => p.id !== id));\n        setNotificationForFiveSeconds(`Deleted ${contact.name}`);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification text={notification}\n        error={isNotificationError} />\n      <ContactFilterForm filter={filter} setFilter={setFilter} />\n      <h3>add a new contact</h3>\n      <form onSubmit={addName}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <ContactList\n        contacts={getFilteredContacts()}\n        deleteContact={deleteContact}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}